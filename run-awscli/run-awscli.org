#+TITLE: Run AWS CLI in an Org buffer
#+AUTHOR: kawahara.masahiro
#+EMAIL: kawahara.masahiro@classmethod.jp

#+PROPERTY: header-args :cache yes :results scalar
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+OPTIONS: toc:t todo:nil num:nil \n:nil ^:nil

# # ゴール
#   - なんか org-mode 便利そうと思ってもらえる
#   - org-mode 利用者は org buffer内で コードを実行する方法を理解してもらう
#   - org-mode 利用者は org buffer内で AWS CLIを実行・管理する方法を理解してもらう

* はじめに
  - org-babel で AWS CLIを実行してみました。手順を記載します。
** 実行環境
  - OS :: macOS Mojave, version 10.14.5
  - Emacs :: version 26.2
  - Org-mode :: version 9.1.9
* 要約
  1. [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] を使って シェルのPATHを Emacsに引き継ぎます。

  2. 下記 設定を ~init.el~ に記載します。
     #+BEGIN_SRC emacs-lisp :noweb yes :tangle init.el
     ;;;; exec-path-from-shell
     <<config_path>>
     
     ;;;; org-babel
     <<config_babel>>
     #+END_SRC

  3. AWS CLIが実行できます。
     file:./img/orgaws-1.png
* 前準備
** AWS CLI
   AWS CLIを [[https://aws.amazon.com/jp/cli/][こちら]] からインストールします。
** Emacs: AWS CLI パス設定
   ~aws~ コマンドを認識させるために Emacsの PATH設定を行います。
   [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] を使って シェルのPATHを Emacsに引き継ぎます。

   [[https://github.com/purcell/exec-path-from-shell#installation][Installation]] どおりに ~exec-path-from-shell~ インストールを行います。
   #+BEGIN_QUOTE
   Installable packages are available via MELPA: do ~M-x package-install RET exec-path-from-shell RET~.
   #+END_QUOTE

   インストール後、 ~init.el~ に下記設定を記載します。
   #+NAME: config_path
   #+BEGIN_SRC emacs-lisp
     (when (memq window-system '(mac ns x))
       (exec-path-from-shell-initialize))
   #+END_SRC
** Emacs: org-babel 設定
   以下のように ~init.el~ に設定します。
   #+NAME: config_babel
   #+BEGIN_SRC emacs-lisp
     ;; コード実行時に confirm しない
     (setq org-confirm-babel-evaluate nil)

     ;; 実行できる言語を指定
     (org-babel-do-load-languages
      'org-babel-load-languages
      '(
        (shell . t)
        )
      )
   #+END_SRC

* AWS CLI実行
** 確認
   ▼bashコマンドが実行できるか確認します。
   #+BEGIN_SRC sh :exports both
   ls
   #+END_SRC

   #+RESULTS[59744ddfbeb551a770443a3ea1c54cbf62eb88f6]:
   : how-to-execute-awscli.html
   : img
   : init.el
   : run-awscli.html
   : run-awscli.org

   
   ▼次に ~aws~ コマンドのパスが通っているか確認します。
   #+BEGIN_SRC sh :exports both 
   aws --version
   #+END_SRC

   #+RESULTS[94050750f89caff84a83600af87f81985908ce7e]:
   : aws-cli/1.16.173 Python/3.7.3 Darwin/18.7.0 botocore/1.12.163

** s3 ls コマンドの実行
   ~aws s3 ls~ を実行し、バケット一覧の表示を確認します。

   #+BEGIN_SRC sh :exports both :results scalar
   aws s3 ls
   #+END_SRC

   #+RESULTS[5681767c5c45395a7ae378fac0a022d23ad41199]:
   : 2019-08-05 16:36:39 aws-athena-query-results-xxxxx-ap-northeast-1
   : 2019-07-08 18:43:57 cf-templates-xxxxx-ap-northeast-1
   : 2019-05-20 10:04:01 cm-members-xxxxx

** ※MFA設定への対応
   MFAを設定している場合は少々プロセスが煩雑になります。
   以下、  ~MFA設定有り~ かつ ~スイッチロール有り~ のケースの対応です。
*** 1. 設定ファイルの編集
    ~~/.aws/config~ ファイルを以下のように記述します。
    #+BEGIN_SRC text
    [profile mfa]
    output = json
    region = ap-northeast-1
    credential_process = cat /Users/kawahara.masahiro/.aws/tmp_cred.json
    #+END_SRC

    最後の行は ~credential_process = cat (tmp_cred.jsonへの絶対パス)~ とします。
    認証情報「tmp_cred.json」 を [[2. 認証情報の取得]] で生成します。

*** 2. 認証情報の取得
    ▼ ~aws sts assume-role~ で一時的な認証情報を取得します。
    以下スクリプトを実行します。
    #+BEGIN_SRC sh :exports code :var MFA=240030
    MFA_ARN='arn:aws:iam::xxxxx:mfa/cm-kawahara.masahiro'
    ROLE_ARN='arn:aws:iam::yyyyy:role/cm-kawahara.masahiro'
     
    aws --output json \
      sts assume-role \
      --role-arn "$ROLE_ARN" \
      --role-session-name ar-cred-proc \
      --serial-number "$MFA_ARN" \
      --token-code $MFA \
    | jq ".Credentials + {Version: 1}" > ~/.aws/tmp_cred.json
    #+END_SRC
     
    #+RESULTS[b722705a99c6feedb4c0715f44dcdf5f6571f675]:

    ▼ 「tmp_cred.json」を表示します。
    #+BEGIN_SRC sh :exports both
    cat ~/.aws/tmp_cred.json
    #+END_SRC

    #+RESULTS[972191545db243e5c82fe1e26497eb0168bceca2]:
    : {
    :   "AccessKeyId": "ASIXXXXXXXXXXXX",
    :   "SecretAccessKey": "L3iXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
    :   "SessionToken": "FQoXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX,
    :   "Expiration": "2019-08-16T09:27:22Z",
    :   "Version": 1
    : }

*** 3. aws コマンド実行
    以降、 "Expiration" に記載されている時刻まで AWSコマンドを実行できます。
    実行する際は [[1. 設定ファイルの編集]] の profile ~mfa~ を指定します。
    #+BEGIN_SRC sh :exports both
    aws --profile mfa s3 ls
    #+END_SRC

    #+RESULTS[7743dee24d959553496de2c16c5341b64714847f]:
    : 2019-08-05 16:36:39 aws-athena-query-results-xxxxx-ap-northeast-1
    : 2019-07-08 18:43:57 cf-templates-xxxxx-ap-northeast-1
    : 2019-05-20 10:04:01 cm-members-xxxxx

* 参考
  - https://orgmode.org/worg/org-contrib/babel/intro.html
  - https://tamura70.hatenadiary.org/entry/20100310/org
  - https://emacs-jp.github.io/tips/environment-variable
  - https://dev.classmethod.jp/cloud/aws/aws-cli-credential_process-assume-role/
